#include "CSS1.h"
#include "../../Common/Log.h"
#include "DataStructTTCDevCtlInterface.h"
#include "Global.h"
CSS1::CSS1()
{
}

bool CSS1::init(USHORT deviceID, PlatformResource* pRes, SMCU2::MCSSSTCStatus4* pTC)
{
    m_devID = deviceID;
    m_pPlatformRes = pRes;
    m_pTC4_4 = pTC;
    DATA_SOURCE_ALLOC(SMCU::MCSSSPNCODEStatusStruct4, m_pMCSSSPNCODEStatu4_9, "模式1扩频码设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSTMSimulStatusStruct4, m_pMCSSSTMSimulStatu4_8, "扩频遥测模拟源参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSTMStatusStruct4, m_pMCSSSTMStatusStruct4_6, "扩频遥测解调参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSTCStatusStruct4, m_pMCSSSTCStatusStruct4_5, "扩频遥控参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSCjStatusStruct4, m_pMCSSSCjStatu4_4, "模式1测距测速参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSUTargetTCSSUpModulStatusStruct, m_pMCSSSUTargetTCSSUpModulStatu3, "模式1调制参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSRevStatusStruct4, m_pMCSSSRev4Statu4_2, "模式1接收参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSysTarget4StatusStruct, m_pMCSSysTarget4Status1, "扩频1系统工作参数设置", deviceID, 0)
    DATA_SOURCE_ALLOC(SMCU::MCSSSTraceStatusStruct4, m_pTrace4_7, "扩频1主跟踪单元", deviceID, 0)
    DATA_SOURCE_ALLOC_PRO_CTRL(PCRSS1, m_pcrSS, "过程控制命令", deviceID, 4)
    return true;
}

void CSS1::processBaseBound_0xF100(char *pData)
{
    CCRESPONSE ccResponse;
    memcpy(&ccResponse, pData, sizeof(CCRESPONSE));

    if(0xF002 == ccResponse.TYPE)
    {//单元参数设置命令
        QString log = "单元参数设置命令,单元0x";
        log = log + QString::number(ccResponse.ID, 16);
        log = log + "的序号: 0x" + QString::number(ccResponse.SEQ, 16)+ ". ";
        log = log + "控制结果: " + QString::number(ccResponse.CRESULT) + ".\n";
        CLog::addLog(log);
    }
    else if(0xF003 == ccResponse.TYPE)
    {//组参数设置命令
        QString log = "组参数设置命令";
        log = log + "的序号: 0x" + QString::number(ccResponse.SEQ, 16)+ ". ";
        log = log + "控制结果: " + QString::number(ccResponse.CRESULT) + ".\n";
        CLog::addLog(log);
    }
    else if(0xF001 == ccResponse.TYPE)
    {//过程控制命令
        QString log = "过程控制命令0x";
        log = log + QString::number(ccResponse.ID, 16);
        log = log + "的序号: 0x" + QString::number(ccResponse.SEQ, 16)+ ". ";
        log = log + "控制结果: " + QString::number(ccResponse.CRESULT) + ".\n";
        CLog::addLog(log);
    }
}

void CSS1::processBaseBound_0xF104(char *pData, const int dataLen)
{
    BYTE* pDataField = new BYTE[dataLen];
    memcpy(pDataField, pData, dataLen);
    QMap<int, int> mapFB_FE;
    getMap(pDataField, dataLen, mapFB_FE);

    QMap<int, int>::iterator mpIter = mapFB_FE.begin();
    QMap<int, int>::const_iterator mpIterEnd = mapFB_FE.end();
    for(; mpIter != mpIterEnd; ++mpIter)
    {
        BYTE unitNum = pDataField[mpIter.key() + 1];
        BYTE* pBuff = pDataField + mpIter.key() + 2;
        processBaseBoundData(pBuff, unitNum);
    }
    delete pDataField;
}

void CSS1::processBaseBound_0xF101(char * pData)
{
    //过程命令标识，在上报时，对低字节进行取反，高字节不变。
    //逆操作上述过程得到原来的过程命令标识.
    USHORT id = 0;
    memcpy(&id, pData, sizeof(USHORT));
    UCHAR ucCode = id;
    ucCode = 0xFF-ucCode;
    pData += 2;//过程命令标识与序列号两个字节.
    switch(ucCode)
    {
    case 1:
        memcpy(&m_pcrSS->tcIssue1, pData, sizeof(ss1TCISSUE));
        break;
    case 3:
        memcpy(&m_pcrSS->tzBound3, pData, sizeof(ss1TZBOUND));
        break;
    case 4:
        memcpy(&m_pcrSS->eZero4, pData, sizeof(ss1EQUIPMENTZERO));
        m_pcrSS->eZero4.qz0.valid = 3;
        break;
    case 8:
        memcpy(&m_pcrSS->ntIssue8, pData, sizeof(ss1NTISSUE));
        break;
    case 13:
    {
        SSTTCRCTTST *pVal = (SSTTCRCTTST*)pData;
        if (pVal->chlType >= 1 && pVal->chlType <= 2
                && pVal->chl >= 1 && pVal->chl <= 4  && pVal->time > 0)
        {
            memcpy(&m_pcrSS->rctTst13[pVal->chlType - 1][pVal->chl - 1], pData, sizeof(SSTTCRCTTST));
        }
    }
        break;
    case 16:
        memcpy(&m_pcrSS->clBandwidth16, pData, sizeof(SSTTCTCLBANDWITH));
        break;
    case 20:
    {
        SSTDRTST *pVal = (SSTDRTST*)pData;
        if (pVal->chlType >= 1 && pVal->chlType <= 2
                && pVal->chl >= 1 && pVal->chl <= 4)
        {
            memcpy(&m_pcrSS->ssTone20[pVal->chlType - 1][pVal->chl - 1], pData, sizeof(SSTDRTST));
        }
    }
        //memcpy(&m_pcrSS->ssTone20, pData, sizeof(SSTDRTST));
        break;
    case 21:
        memcpy(&m_pcrSS->drtTst21, pData, sizeof(ss1RTEFSTAT));
        break;
    case 22:
        memcpy(&m_pcrSS->ttcTst22, pData, sizeof(ss1BERTST));
        break;
    case 23:
        memcpy(&m_pcrSS->strcTst23, pData, sizeof(ss1FERTST));
        break;
    case 24:
        memcpy(&m_pcrSS->rcsreiTst24, pData, sizeof(ss1RCSREITST));
        break;
    case 25:
        memcpy(&m_pcrSS->dmreTst25, pData, sizeof(ss1DMRETST));
        break;
    case 26:
        memcpy(&m_pcrSS->smreTst26, pData, sizeof(ss1SMRETST));
        break;
    case 27:
        memcpy(&m_pcrSS->dSimu27, pData, sizeof(ss1DOPPLERSIMU));
        break;
    case 28:
        memcpy(&m_pcrSS->bbdtsSel28, pData, sizeof(ss1BBDTSSEL));
        break;
    case 30:
        memcpy(&m_pcrSS->dmdrrPort30, pData, sizeof(ss1DMDRRPORT));
        break;
    case 31:
        memcpy(&m_pcrSS->smdrePort31, pData, sizeof(ss1SMDREPORT));
        break;
    case 32:
        memcpy(&m_pcrSS->ttcdSave32, pData, sizeof(ss1TTCDSAVE));
        break;
    case 33:
        memcpy(&m_pcrSS->bzcrInquire33, pData, sizeof(ss1BZCRINQUIRE));
        m_pcrSS->bzcrInquire33.eZero.valid = 1;
        break;
    case 36:
        memcpy(&m_pcrSS->r0Decuction36, pData, sizeof(ss1R0DEDUCTION));
        break;
    case 39:
        memcpy(&m_pcrSS->dpfpcRange39, pData, sizeof(ss1DPFPCRANGE));
        break;
    case 40:
        memcpy(&m_pcrSS->AGCcBind40, pData, sizeof(ss1AGCCBIND));
        break;
    case 41:
        memcpy(&m_pcrSS->dcCtrl41, pData, sizeof(DCCTRL));
        break;
    default:
        CLog::addLog("单元序号错误.\n");
    }
}

void CSS1::getMap(BYTE* pDataField, const int dataLen, QMap<int, int>& mapFB_FE)
{
    for(int i = 0; i < dataLen; ++i)
    {
        int tmp = pDataField[i];
        QPair<int, int> pairFB_FE;
        if(0xFB != tmp)continue;
        pairFB_FE.first = i;
        for(int j = i; j < dataLen; ++j)
        {
            tmp = pDataField[j];
            if(0xFE != tmp)continue;
            i = pairFB_FE.second = j;
            break;
        }
        mapFB_FE[pairFB_FE.first] = pairFB_FE.second;
    }
}

void CSS1::processBaseBand(QByteArray &datagram)
{
    NETSDFRM netSDFrm;
    int nNetSDFRMLen = sizeof(NETSDFRM);
    memcpy(&netSDFrm, datagram.data(), nNetSDFRMLen);
    switch(netSDFrm.BID)
    {
    case 0xF100:
        g_showDatagram.m_datagramCommRev = datagram;
        //控制命令响应
        processBaseBound_0xF100(datagram.data() + nNetSDFRMLen);
        break;
    case 0xF104:
        g_showDatagram.m_datagramStatuRev = datagram;
        //分机状态信息上报
        processBaseBound_0xF104(datagram.data()  + nNetSDFRMLen, netSDFrm.DataLen);
        break;
    case 0xF101:
        g_showDatagram.m_datagramCommRev = datagram;
        //控制结果上报
        processBaseBound_0xF101(datagram.data()  + nNetSDFRMLen);
        break;
    default:
        break;
    }
}

void CSS1::processBaseBoundData(BYTE *pBuff, const BYTE &unitNum)
{
    switch(unitNum)
    {
    case 1:
        SMCU::MCSSysTarget4StatusStruct tmp;
        memcpy(&tmp, pBuff, sizeof(SMCU::MCSSysTarget4StatusStruct));
        tmp.sysStatu.ucSystemMode = 8;
        memcpy(m_pMCSSysTarget4Status1, &tmp, sizeof(SMCU::MCSSysTarget4StatusStruct));
        break;
    case 2://模式1接收参数设置
        memcpy(m_pMCSSSRev4Statu4_2, pBuff, sizeof(SMCU::MCSSSRevStatusStruct4));
        break;
    case 3://模式1调制参数设置
        memcpy(m_pMCSSSUTargetTCSSUpModulStatu3, pBuff, sizeof(SMCU::MCSSSUTargetTCSSUpModulStatusStruct));
        break;
    case 5://扩频遥控参数设置
        memcpy(m_pMCSSSTCStatusStruct4_5, pBuff, sizeof(SMCU::MCSSSTCStatusStruct4));
        break;
    case 4://模式1测距测速参数设置
        memcpy(m_pMCSSSCjStatu4_4, pBuff, sizeof(SMCU::MCSSSCjStatusStruct4));
        break;
    case 6://扩频遥测解调参数设置
        memcpy(m_pMCSSSTMStatusStruct4_6, pBuff, sizeof(SMCU::MCSSSTMStatusStruct4));
        break;
    case 7://主跟踪单元
        memcpy(m_pTrace4_7, pBuff, sizeof(SMCU::MCSSSTraceStatusStruct4));
        break;
    case 8://扩频遥测模拟源参数设置
        memcpy(m_pMCSSSTMSimulStatu4_8, pBuff, sizeof(SMCU::MCSSSTMSimulStatusStruct4));
        break;
    case 9://模式1扩频码设置
        memcpy(m_pMCSSSPNCODEStatu4_9, pBuff, sizeof(SMCU::MCSSSPNCODEStatusStruct4));
        break;
    default:
        break;
    }
}


void CSS1::updateAbstract(SS1BBE_GlobalStatusStruct* pBbeAbstract)
{
    if(m_pTC4_4)
    {
        for(int i = 0; i < MAX_TARGET_COUNT; ++i){
            memcpy((char*)&m_pTC4_4->MCSSSB2TCStatu[i], (char*)&m_pMCSSSTCStatusStruct4_5->SSTCStatusStruct[i], 16);
            memcpy((char*)&m_pTC4_4->MCSSSB2TCStatu[i] + 20, (char*)&m_pMCSSSTCStatusStruct4_5->SSTCStatusStruct[i] + 16, sizeof(m_pTC4_4->MCSSSB2TCStatu[i]) - 20);
            m_pTC4_4->MCSSSB2TCStatu[i].uiAllCmdSendTotal = m_pMCSSysTarget4Status1->targetSysStatu[i].usTCSendNum;
            m_pTC4_4->MCSSSB2TCStatu[i].uiAllSmallLoopRight = m_pMCSSysTarget4Status1->targetSysStatu[i].usTCSendNum - m_pMCSSysTarget4Status1->targetSysStatu[0].usTCSmallLoopErrNum;
        }
        m_pTC4_4->valid = 1;
    }
    if(!pBbeAbstract)return;
    //m_pMCSSysTarget4Status1 UCHAR  ucMonitorMode;	//监控方式	0：无效， 1：分控， 2：本控
    //pBbeAbstract UCHAR		  ucMonitorMode;		//控制模式	      0: 分控， 1：本控
    pBbeAbstract->ucMonitorMode = m_pMCSSysTarget4Status1->sysStatu.ucMonitorMode;
    if(m_pMCSSysTarget4Status1->sysStatu.ucBBEOnline == 1){
        if(m_pTC4_4)
        {
            for(int i = 0; i < MAX_TARGET_COUNT; ++i){
                memcpy((char*)&m_pTC4_4->MCSSSB2TCStatu[i], (char*)&m_pMCSSSTCStatusStruct4_5->SSTCStatusStruct[i], 16);
                memcpy((char*)&m_pTC4_4->MCSSSB2TCStatu[i] + 20, (char*)&m_pMCSSSTCStatusStruct4_5->SSTCStatusStruct[i] + 16, sizeof(m_pTC4_4->MCSSSB2TCStatu[i]) - 20);
                m_pTC4_4->MCSSSB2TCStatu[i].uiAllCmdSendTotal = m_pMCSSysTarget4Status1->targetSysStatu[i].usTCSendNum;
                m_pTC4_4->MCSSSB2TCStatu[i].uiAllSmallLoopRight = m_pMCSSysTarget4Status1->targetSysStatu[i].usTCSendNum - m_pMCSSysTarget4Status1->targetSysStatu[0].usTCSmallLoopErrNum;
            }
            m_pTC4_4->valid = 1;
        }
        if(m_devID == 0x400)
            pBbeAbstract->ucBBEWorkID = 1;
        else pBbeAbstract->ucBBEWorkID = 2;
    }
    else
    {
        if(m_devID == 0x401)
            pBbeAbstract->ucBBEWorkID = 1;
        else pBbeAbstract->ucBBEWorkID = 2;
    }
    pBbeAbstract->ucBBEID = m_devID == 0x400 ? 1 : 2;//fix me
    pBbeAbstract->ucBBEWorkStatus = m_pMCSSysTarget4Status1->sysStatu.ucBBEWorkStatus;
    pBbeAbstract->ucSystemWorkMode = m_pMCSSysTarget4Status1->sysStatu.ucSystemMode;//按注释来的
    //pBbeAbstract->ucDataTransStatus = m_pMCSSysTarget4Status1->sysStatu;//不使用
    //pBbeAbstract->nBID = //不使用
    pBbeAbstract->ucSystemMode = m_pMCSSysTarget4Status1->sysStatu.ucSystemWorkMode;//按注释来的

    //pBbeAbstract->ucDeviceAssembleID = m_pMCSSysTarget4Status1->sysStatu.tParams.dwlComboID; fix me下边还有一个//不使用

    //pBbeAbstract->byStaID//不使用
    pBbeAbstract->i64DeviceAssembleID = m_pMCSSysTarget4Status1->sysStatu.tParams.dwlComboID;
    //pBbeAbstract->byRcvType //不使用
    for(int i = 0; i < MAX_TARGET_COUNT; ++i)
    {
        updateAbstractIndex(pBbeAbstract->IndexStatus[i], i);
    }
    pBbeAbstract->ucTimeCodeStatus = m_pMCSSysTarget4Status1->sysStatu.ucTimeCodeStatus;
    pBbeAbstract->ucTrackChnlSel = m_pMCSSysTarget4Status1->sysStatu.tParams.ucTrackChnlSel;
    pBbeAbstract->ucTrackDefCH = m_pMCSSysTarget4Status1->sysStatu.tParams.ucTrackDefCH;
    pBbeAbstract->ucCHNum = m_pMCSSysTarget4Status1->sysStatu.tParams.ucTargetNum;//目标数

}

void CSS1::updateAbstractIndex(SS1BBE_IndexStatusStruct& index, int target)
{
//    UCHAR ucCarrLk; // 载波锁定 00H：失锁，01H：锁定。
//    UCHAR	ucSPNLock;			//I路伪码锁定指示,0：无效，1：锁定，2：失锁。
//    UCHAR   ucQPNLock;          //Q路伪码锁定指示 0：无效，1：锁定，2：失锁。
//    UCHAR	ucSatLock;				//卫星锁定指示,0：无效，1：锁定，2：失锁。
    index.ucCarrLk = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].ucCarrLock;
    index.ucSPNLock = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].ucSPNLock;
    index.ucQPNLock = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].ucQPNLock;
    index.ucSatLock = m_pMCSSysTarget4Status1->targetSysStatu[target].ucSatLock;
    index.usEbN0 = m_pMCSSSTMStatusStruct4_6->SSTMStatu[target].usEbN0;

    index.nCodeRate = m_pMCSSSTCStatusStruct4_5->SSTCStatusStruct[target].tParams.uiCodeRate;
    index.ucWordLen = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.ucWordLen;//遥测与模拟源都有字长
    index.usFrmLen = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.usFrameLen;
    index.dwlSynCode = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.uiFrameSynG;
    index.ucFspLen = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.ucFrameSynGLen;
    index.ucSubFrmType = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.ucSFrameSynMd - 1;

    index.usSubFrmLen = m_pMCSSSTMSimulStatu4_8->SSTMSimulStatu[target].tParams.ucSframeLen;

    index.ucCodeLock = m_pMCSSSTMStatusStruct4_6->SSTMStatu[target].ucCodeLock;
    index.ucFrmLock = m_pMCSSSTMStatusStruct4_6->SSTMStatu[target].ucFrmLock;
    index.ucSubFrmLock = m_pMCSSSTMStatusStruct4_6->SSTMStatu[target].ucSubFrmLock;
    //index.ucDisAble fix me
    //index.ucSpeedAble fix me
    index.iDistance = m_pMCSSSCjStatu4_4->SSCjStatu[target].iDistance;
    index.iDopRate = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].iDopRate;
    index.iSpeed = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].iVelocety;
    index.usAgcVolt = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].usAgcVolt;
    index.usSqDir = m_pMCSSSRev4Statu4_2->targetSSRevStatu[target].usSqDir;
    index.ucPreRangDataMd = m_pMCSSSCjStatu4_4->SSCjStatu[target].tParams.ucPreRangDataMd;
    index.ulPridictR = m_pMCSSSCjStatu4_4->SSCjStatu[target].tParams.ulPridictR;
    if(target == m_pcrSS->bzcrInquire33.chl - 1)
    {
        if(m_pcrSS->bzcrInquire33.eZero.valid ){
        m_pcrSS->bzcrInquire33.eZero.valid = 0;
        index.uiDeviceDisZero = m_pcrSS->bzcrInquire33.eZero.meanValueTo0;
        }
    }
//    index.ucTMSaveStatus;
//    index.ucCJSaveStatus;
//    index.ucCSSaveStatus;
    index.ucTMSendSwitch = m_pMCSSysTarget4Status1->targetSysStatu[target].ucTMSendSwitch;
    index.ucCJSendSwitch = m_pMCSSysTarget4Status1->targetSysStatu[target].ucCJSendSwitch;
    index.ucCSSendSwitch = m_pMCSSysTarget4Status1->targetSysStatu[target].ucCSSendSwitch;
    if(m_pMCSSysTarget4Status1->sysStatu.tParams.ucSendMode == 1)
    {
        index.ucTMSendSwitch = 1;
        index.ucCJSendSwitch = 1;
        index.ucCSSendSwitch = 1;
    }
    index.ucTaskID = m_pMCSSysTarget4Status1->targetSysStatu[target].tParams.uiM;//任务代号
    memcpy(index.szTaskName, m_pMCSSysTarget4Status1->targetSysStatu[target].tParams.ucTaskDescribe, 6);
}









